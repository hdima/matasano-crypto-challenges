Return-Path: <bounce+31f59b.0371-dima=hlabs.org@matasanocryptopals.com>
Delivered-To: dima@hlabs.org
Received: from localhost (localhost.localdomain [127.0.0.1])
	by mail.hlabs.org (Postfix) with SMTP id 9A037320BE
	for <dima@hlabs.org>; Fri,  3 Jan 2014 08:21:10 +0000 (GMT)
Received: from mail-s43.mailgun.us (mail-s43.mailgun.us [184.173.153.43])
	by mail.hlabs.org (Postfix) with ESMTP id 0C55E32096
	for <dima@hlabs.org>; Fri,  3 Jan 2014 08:21:09 +0000 (GMT)
DKIM-Signature: a=rsa-sha256; v=1; c=relaxed/relaxed; d=matasanocryptopals.com;
 q=dns/txt; s=mx; t=1388737268; h=Mime-Version: Content-Type: Subject:
 From: To: Reply-To: Message-Id: Content-Transfer-Encoding: Date:
 Sender; bh=TQUh4RQTke1xNZaJ+8EqakxazTuzf2WDg7jCgbwX0gQ=; b=N7uWQCJKfIuxfqSahBzt2A370fb/7p1q9lzexqFB9qP8PxiIUC7K2KLafsIc+iN1R26wI0ww
 NlKfByYRIHdpFg9h/Zekol5M1MZ+NNL+yVNML7SEXDo9w4vX/QEd41iXtYqDoyomSObSiJWa
 26JQvMS2H2+uc57WjcyNtC/MNEk=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=matasanocryptopals.com;
 s=mx; q=dns; h=Mime-Version: Content-Type: Subject: From: To: Reply-To:
 Message-Id: Content-Transfer-Encoding: Date: Sender;
 b=dV4Qf1x0PJ77+2zDr4d+PcZtCMK5zEn6qk1TxDrgYGrnh5TU//V/vtdd4POKer9Setqvs0
 U20zGtBxKG13FKPR/P5z88kh4Le/c1XKKuqwtFkI5l3aERXsG3fOLAVDLD99Lhs9FkjdOk2/
 aM38R1LkfVWuOkkAnB7aWf3v3pSD0=
Received: by luna.mailgun.net with HTTP; Fri, 03 Jan 2014 08:21:06 +0000
Mime-Version: 1.0
Content-Type: text/plain; charset="ascii"
Subject: Welcome To The Matasano Crypto Challenges!
From: The Matasano Crypto Pals <cryptopals@matasano.com>
To: dima@hlabs.org
X-Mailgun-Dkim: true
X-Mailgun-Tag: -auto
Reply-To: cryptopals@matasano.com, responses@matasanocryptopals.com
Message-Id: <20140103082106.11000.10192@matasanocryptopals.com>
Content-Transfer-Encoding: 7bit
X-Mailgun-Sid: WyI1ODEwZiIsICJkaW1hQGhsYWJzLm9yZyIsICIwMzcxIl0=
Date: Fri, 03 Jan 2014 08:21:08 +0000
Sender: cryptopals=matasano.com@matasanocryptopals.com
X-DSPAM-Result: Innocent
X-DSPAM-Processed: Fri Jan  3 08:21:10 2014
X-DSPAM-Confidence: 0.9911
X-DSPAM-Probability: 0.0000
X-DSPAM-Signature: 52c672f69672096531648

Hello!

Sorry if you're getting this problem set for the second time. We're
still fine-tuning our process, and there are a few kinks to work out.

That being said: enclosed are the cryptography challenges you
requested.

To be clear, this is a subset comprising the first eight problems. You
can get the second set by solving these first. Feel free to send us
solutions in the language of your choice along with answers in
comments or the body of your email.

If you get stuck or need clarification on something, don't hesitate to
ask! We're happy to help.

THE RULES AND THEY ARE SOMEWHAT IMPORTANT:

* Please do not share this with anyone or post solutions online. If you
have any friends who would like to participate, send them our way and
we will set them up.

* When you mail your solutions, please CC responses@matasanocryptopals.com.

* Please prefix the subject of your mail with RESPONSE:.

// ------------------------------------------------------------

1. Convert hex to base64 and back.

The string:

  49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d

should produce:

  SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t

Now use this code everywhere for the rest of the exercises. Here's a
simple rule of thumb:

  Always operate on raw bytes, never on encoded strings. Only use hex
  and base64 for pretty-printing.

// ------------------------------------------------------------

2. Fixed XOR

Write a function that takes two equal-length buffers and produces
their XOR sum.

The string:

 1c0111001f010100061a024b53535009181c

... after hex decoding, when xor'd against:

 686974207468652062756c6c277320657965

... should produce:

 746865206b696420646f6e277420706c6179

// ------------------------------------------------------------

3. Single-character XOR Cipher

The hex encoded string:

      1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736

... has been XOR'd against a single character. Find the key, decrypt
the message.

Write code to do this for you. How? Devise some method for "scoring" a
piece of English plaintext. (Character frequency is a good metric.)
Evaluate each output and choose the one with the best score.

Tune your algorithm until this works.

// ------------------------------------------------------------

4. Detect single-character XOR

One of the 60-character strings at:

  https://gist.github.com/3132713

has been encrypted by single-character XOR. Find it. (Your code from
#3 should help.)

// ------------------------------------------------------------

5. Repeating-key XOR Cipher

Write the code to encrypt the string:

  Burning 'em, if you ain't quick and nimble
  I go crazy when I hear a cymbal

Under the key "ICE", using repeating-key XOR. It should come out to:

  0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f

Encrypt a bunch of stuff using your repeating-key XOR function. Get a
feel for it.

// ------------------------------------------------------------

6. Break repeating-key XOR

The buffer at the following location:

 https://gist.github.com/3132752

is base64-encoded repeating-key XOR. Break it.

Here's how:

a. Let KEYSIZE be the guessed length of the key; try values from 2 to
(say) 40.

b. Write a function to compute the edit distance/Hamming distance
between two strings. The Hamming distance is just the number of
differing bits. The distance between:

  this is a test

and:

  wokka wokka!!!

is 37.

c. For each KEYSIZE, take the FIRST KEYSIZE worth of bytes, and the
SECOND KEYSIZE worth of bytes, and find the edit distance between
them. Normalize this result by dividing by KEYSIZE.

d. The KEYSIZE with the smallest normalized edit distance is probably
the key. You could proceed perhaps with the smallest 2-3 KEYSIZE
values. Or take 4 KEYSIZE blocks instead of 2 and average the
distances.

e. Now that you probably know the KEYSIZE: break the ciphertext into
blocks of KEYSIZE length.

f. Now transpose the blocks: make a block that is the first byte of
every block, and a block that is the second byte of every block, and
so on.

g. Solve each block as if it was single-character XOR. You already
have code to do this.

e. For each block, the single-byte XOR key that produces the best
looking histogram is the repeating-key XOR key byte for that
block. Put them together and you have the key.

// ------------------------------------------------------------

7. AES in ECB Mode

The Base64-encoded content at the following location:

    https://gist.github.com/3132853

Has been encrypted via AES-128 in ECB mode under the key

    "YELLOW SUBMARINE".

(I like "YELLOW SUBMARINE" because it's exactly 16 bytes long).

Decrypt it.

Easiest way:

Use OpenSSL::Cipher and give it AES-128-ECB as the cipher.

// ------------------------------------------------------------

8. Detecting ECB

At the following URL are a bunch of hex-encoded ciphertexts:

   https://gist.github.com/3132928

One of them is ECB encrypted. Detect it.

Remember that the problem with ECB is that it is stateless and
deterministic; the same 16 byte plaintext block will always produce
the same 16 byte ciphertext.

// ------------------------------------------------------------

